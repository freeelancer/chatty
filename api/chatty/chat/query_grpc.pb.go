// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Conversation items.
	Conversation(ctx context.Context, in *QueryConversationRequest, opts ...grpc.CallOption) (*QueryConversationResponse, error)
	// Queries a list of Conversations items.
	Conversations(ctx context.Context, in *QueryConversationsRequest, opts ...grpc.CallOption) (*QueryConversationsResponse, error)
	// Queries a list of Pubkeys items.
	Pubkeys(ctx context.Context, in *QueryPubkeysRequest, opts ...grpc.CallOption) (*QueryPubkeysResponse, error)
	// Queries a list of Pubkey items.
	Pubkey(ctx context.Context, in *QueryPubkeyRequest, opts ...grpc.CallOption) (*QueryPubkeyResponse, error)
	// Queries a list of GroupConversationById items.
	GroupConversationById(ctx context.Context, in *QueryGroupConversationByIdRequest, opts ...grpc.CallOption) (*QueryGroupConversationByIdResponse, error)
	// Queries a list of GroupConversationsByAddress items.
	GroupConversationsByAddress(ctx context.Context, in *QueryGroupConversationsByAddressRequest, opts ...grpc.CallOption) (*QueryGroupConversationsByAddressResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Conversation(ctx context.Context, in *QueryConversationRequest, opts ...grpc.CallOption) (*QueryConversationResponse, error) {
	out := new(QueryConversationResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Conversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Conversations(ctx context.Context, in *QueryConversationsRequest, opts ...grpc.CallOption) (*QueryConversationsResponse, error) {
	out := new(QueryConversationsResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Conversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pubkeys(ctx context.Context, in *QueryPubkeysRequest, opts ...grpc.CallOption) (*QueryPubkeysResponse, error) {
	out := new(QueryPubkeysResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Pubkeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pubkey(ctx context.Context, in *QueryPubkeyRequest, opts ...grpc.CallOption) (*QueryPubkeyResponse, error) {
	out := new(QueryPubkeyResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Pubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupConversationById(ctx context.Context, in *QueryGroupConversationByIdRequest, opts ...grpc.CallOption) (*QueryGroupConversationByIdResponse, error) {
	out := new(QueryGroupConversationByIdResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/GroupConversationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupConversationsByAddress(ctx context.Context, in *QueryGroupConversationsByAddressRequest, opts ...grpc.CallOption) (*QueryGroupConversationsByAddressResponse, error) {
	out := new(QueryGroupConversationsByAddressResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/GroupConversationsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Conversation items.
	Conversation(context.Context, *QueryConversationRequest) (*QueryConversationResponse, error)
	// Queries a list of Conversations items.
	Conversations(context.Context, *QueryConversationsRequest) (*QueryConversationsResponse, error)
	// Queries a list of Pubkeys items.
	Pubkeys(context.Context, *QueryPubkeysRequest) (*QueryPubkeysResponse, error)
	// Queries a list of Pubkey items.
	Pubkey(context.Context, *QueryPubkeyRequest) (*QueryPubkeyResponse, error)
	// Queries a list of GroupConversationById items.
	GroupConversationById(context.Context, *QueryGroupConversationByIdRequest) (*QueryGroupConversationByIdResponse, error)
	// Queries a list of GroupConversationsByAddress items.
	GroupConversationsByAddress(context.Context, *QueryGroupConversationsByAddressRequest) (*QueryGroupConversationsByAddressResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Conversation(context.Context, *QueryConversationRequest) (*QueryConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conversation not implemented")
}
func (UnimplementedQueryServer) Conversations(context.Context, *QueryConversationsRequest) (*QueryConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conversations not implemented")
}
func (UnimplementedQueryServer) Pubkeys(context.Context, *QueryPubkeysRequest) (*QueryPubkeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pubkeys not implemented")
}
func (UnimplementedQueryServer) Pubkey(context.Context, *QueryPubkeyRequest) (*QueryPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pubkey not implemented")
}
func (UnimplementedQueryServer) GroupConversationById(context.Context, *QueryGroupConversationByIdRequest) (*QueryGroupConversationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupConversationById not implemented")
}
func (UnimplementedQueryServer) GroupConversationsByAddress(context.Context, *QueryGroupConversationsByAddressRequest) (*QueryGroupConversationsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupConversationsByAddress not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Conversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Conversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Conversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Conversation(ctx, req.(*QueryConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Conversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Conversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Conversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Conversations(ctx, req.(*QueryConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pubkeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubkeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pubkeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Pubkeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pubkeys(ctx, req.(*QueryPubkeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Pubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pubkey(ctx, req.(*QueryPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupConversationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupConversationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupConversationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/GroupConversationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupConversationById(ctx, req.(*QueryGroupConversationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupConversationsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupConversationsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupConversationsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/GroupConversationsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupConversationsByAddress(ctx, req.(*QueryGroupConversationsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatty.chat.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Conversation",
			Handler:    _Query_Conversation_Handler,
		},
		{
			MethodName: "Conversations",
			Handler:    _Query_Conversations_Handler,
		},
		{
			MethodName: "Pubkeys",
			Handler:    _Query_Pubkeys_Handler,
		},
		{
			MethodName: "Pubkey",
			Handler:    _Query_Pubkey_Handler,
		},
		{
			MethodName: "GroupConversationById",
			Handler:    _Query_GroupConversationById_Handler,
		},
		{
			MethodName: "GroupConversationsByAddress",
			Handler:    _Query_GroupConversationsByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatty/chat/query.proto",
}
