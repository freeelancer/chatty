// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	CreateChatMessage(ctx context.Context, in *MsgCreateChatMessage, opts ...grpc.CallOption) (*MsgCreateChatMessageResponse, error)
	UpdatePubkey(ctx context.Context, in *MsgUpdatePubkey, opts ...grpc.CallOption) (*MsgUpdatePubkeyResponse, error)
	CreateGroupConversation(ctx context.Context, in *MsgCreateGroupConversation, opts ...grpc.CallOption) (*MsgCreateGroupConversationResponse, error)
	CreateGroupConversationMessage(ctx context.Context, in *MsgCreateGroupConversationMessage, opts ...grpc.CallOption) (*MsgCreateGroupConversationMessageResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateChatMessage(ctx context.Context, in *MsgCreateChatMessage, opts ...grpc.CallOption) (*MsgCreateChatMessageResponse, error) {
	out := new(MsgCreateChatMessageResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Msg/CreateChatMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePubkey(ctx context.Context, in *MsgUpdatePubkey, opts ...grpc.CallOption) (*MsgUpdatePubkeyResponse, error) {
	out := new(MsgUpdatePubkeyResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Msg/UpdatePubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGroupConversation(ctx context.Context, in *MsgCreateGroupConversation, opts ...grpc.CallOption) (*MsgCreateGroupConversationResponse, error) {
	out := new(MsgCreateGroupConversationResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Msg/CreateGroupConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateGroupConversationMessage(ctx context.Context, in *MsgCreateGroupConversationMessage, opts ...grpc.CallOption) (*MsgCreateGroupConversationMessageResponse, error) {
	out := new(MsgCreateGroupConversationMessageResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Msg/CreateGroupConversationMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	CreateChatMessage(context.Context, *MsgCreateChatMessage) (*MsgCreateChatMessageResponse, error)
	UpdatePubkey(context.Context, *MsgUpdatePubkey) (*MsgUpdatePubkeyResponse, error)
	CreateGroupConversation(context.Context, *MsgCreateGroupConversation) (*MsgCreateGroupConversationResponse, error)
	CreateGroupConversationMessage(context.Context, *MsgCreateGroupConversationMessage) (*MsgCreateGroupConversationMessageResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) CreateChatMessage(context.Context, *MsgCreateChatMessage) (*MsgCreateChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatMessage not implemented")
}
func (UnimplementedMsgServer) UpdatePubkey(context.Context, *MsgUpdatePubkey) (*MsgUpdatePubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePubkey not implemented")
}
func (UnimplementedMsgServer) CreateGroupConversation(context.Context, *MsgCreateGroupConversation) (*MsgCreateGroupConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupConversation not implemented")
}
func (UnimplementedMsgServer) CreateGroupConversationMessage(context.Context, *MsgCreateGroupConversationMessage) (*MsgCreateGroupConversationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupConversationMessage not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Msg/CreateChatMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateChatMessage(ctx, req.(*MsgCreateChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePubkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Msg/UpdatePubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePubkey(ctx, req.(*MsgUpdatePubkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGroupConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGroupConversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGroupConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Msg/CreateGroupConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGroupConversation(ctx, req.(*MsgCreateGroupConversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateGroupConversationMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateGroupConversationMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateGroupConversationMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Msg/CreateGroupConversationMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateGroupConversationMessage(ctx, req.(*MsgCreateGroupConversationMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatty.chat.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateChatMessage",
			Handler:    _Msg_CreateChatMessage_Handler,
		},
		{
			MethodName: "UpdatePubkey",
			Handler:    _Msg_UpdatePubkey_Handler,
		},
		{
			MethodName: "CreateGroupConversation",
			Handler:    _Msg_CreateGroupConversation_Handler,
		},
		{
			MethodName: "CreateGroupConversationMessage",
			Handler:    _Msg_CreateGroupConversationMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatty/chat/tx.proto",
}
