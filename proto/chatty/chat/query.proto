syntax = "proto3";

package chatty.chat;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "chatty/chat/params.proto";
import "chatty/chat/genesis.proto";

option go_package = "chatty/x/chat/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/chatty/chat/params";
  
  }
  
  // Queries a list of Conversation items.
  rpc Conversation (QueryConversationRequest) returns (QueryConversationResponse) {
    option (google.api.http).get = "/chatty/chat/conversation/{chatter_a}/{chatter_b}";
  
  }
  
  // Queries a list of Conversations items.
  rpc Conversations (QueryConversationsRequest) returns (QueryConversationsResponse) {
    option (google.api.http).get = "/chatty/chat/conversation/{chatter}";
  
  }
  
  // Queries a list of Pubkeys items.
  rpc Pubkeys (QueryPubkeysRequest) returns (QueryPubkeysResponse) {
    option (google.api.http).get = "/chatty/chat/pubkey";
  
  }
  
  // Queries a list of Pubkey items.
  rpc Pubkey (QueryPubkeyRequest) returns (QueryPubkeyResponse) {
    option (google.api.http).get = "/chatty/chat/pubkey/{address}";
  
  }
  
  // Queries a list of GroupConversationById items.
  rpc GroupConversationById (QueryGroupConversationByIdRequest) returns (QueryGroupConversationByIdResponse) {
    option (google.api.http).get = "/chatty/chat/group_conversation/id/{id}";
  
  }
  
  // Queries a list of GroupConversationsByAddress items.
  rpc GroupConversationsByAddress (QueryGroupConversationsByAddressRequest) returns (QueryGroupConversationsByAddressResponse) {
    option (google.api.http).get = "/chatty/chat/group_conversation/address/{address}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryConversationRequest {
  string chatter_a = 1;
  string chatter_b = 2;
}

message QueryConversationResponse {
  Conversation conversation = 1;
}

message QueryConversationsRequest {
  string chatter = 1;
}

message QueryConversationsResponse {
  repeated Conversation conversations = 1;
}

message QueryPubkeysRequest {}

message QueryPubkeysResponse {
  repeated PubKey pubkeys = 1;
}

message QueryPubkeyRequest {
  string address = 1;
}

message QueryPubkeyResponse {
  PubKey pubkey = 1;
}

message QueryGroupConversationByIdRequest {
  int64 id = 1;
}

message QueryGroupConversationByIdResponse {
  GroupConversation group_conversation = 1;
}

message QueryGroupConversationsByAddressRequest {
  string address = 1;
}

message QueryGroupConversationsByAddressResponse {
  repeated GroupConversation group_conversations = 1;
}

