syntax = "proto3";

package chatty.chat;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "chatty/chat/params.proto";

option go_package = "chatty/x/chat/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  
  // Since: cosmos-sdk 0.47
  rpc UpdateParams                   (MsgUpdateParams                  ) returns (MsgUpdateParamsResponse                  );
  rpc CreateChatMessage              (MsgCreateChatMessage             ) returns (MsgCreateChatMessageResponse             );
  rpc UpdatePubkey                   (MsgUpdatePubkey                  ) returns (MsgUpdatePubkeyResponse                  );
  rpc CreateGroupConversation        (MsgCreateGroupConversation       ) returns (MsgCreateGroupConversationResponse       );
  rpc CreateGroupConversationMessage (MsgCreateGroupConversationMessage) returns (MsgCreateGroupConversationMessageResponse);
}
// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                     "authority";
  option           (amino.name) = "chatty/x/chat/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

message MsgCreateChatMessage {
  string creator   = 1;
  string receiver  = 2;
  string message   = 3;
  bool   encrypted = 4;
}

message MsgCreateChatMessageResponse {}

message MsgUpdatePubkey {
  string creator = 1;
  string pubkey  = 2;
}

message MsgUpdatePubkeyResponse {}

message MsgCreateGroupConversation {
  string creator      = 1;
  string name         = 2;
  repeated string participants = 3;
  string pubkey       = 4;
  string message      = 5;
  bool   encrypted    = 6;
}

message MsgCreateGroupConversationResponse {}

message MsgCreateGroupConversationMessage {
  string creator = 1;
  int64 conversation_id = 2;
  string message = 3;
  bool encrypted = 4;
}

message MsgCreateGroupConversationMessageResponse {}

