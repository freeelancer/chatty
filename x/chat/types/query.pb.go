// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chatty/chat/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryConversationRequest struct {
	ChatterA string `protobuf:"bytes,1,opt,name=chatter_a,json=chatterA,proto3" json:"chatter_a,omitempty"`
	ChatterB string `protobuf:"bytes,2,opt,name=chatter_b,json=chatterB,proto3" json:"chatter_b,omitempty"`
}

func (m *QueryConversationRequest) Reset()         { *m = QueryConversationRequest{} }
func (m *QueryConversationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConversationRequest) ProtoMessage()    {}
func (*QueryConversationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{2}
}
func (m *QueryConversationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversationRequest.Merge(m, src)
}
func (m *QueryConversationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversationRequest proto.InternalMessageInfo

func (m *QueryConversationRequest) GetChatterA() string {
	if m != nil {
		return m.ChatterA
	}
	return ""
}

func (m *QueryConversationRequest) GetChatterB() string {
	if m != nil {
		return m.ChatterB
	}
	return ""
}

type QueryConversationResponse struct {
	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (m *QueryConversationResponse) Reset()         { *m = QueryConversationResponse{} }
func (m *QueryConversationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConversationResponse) ProtoMessage()    {}
func (*QueryConversationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{3}
}
func (m *QueryConversationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversationResponse.Merge(m, src)
}
func (m *QueryConversationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversationResponse proto.InternalMessageInfo

func (m *QueryConversationResponse) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

type QueryConversationsRequest struct {
	Chatter string `protobuf:"bytes,1,opt,name=chatter,proto3" json:"chatter,omitempty"`
}

func (m *QueryConversationsRequest) Reset()         { *m = QueryConversationsRequest{} }
func (m *QueryConversationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryConversationsRequest) ProtoMessage()    {}
func (*QueryConversationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{4}
}
func (m *QueryConversationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversationsRequest.Merge(m, src)
}
func (m *QueryConversationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversationsRequest proto.InternalMessageInfo

func (m *QueryConversationsRequest) GetChatter() string {
	if m != nil {
		return m.Chatter
	}
	return ""
}

type QueryConversationsResponse struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
}

func (m *QueryConversationsResponse) Reset()         { *m = QueryConversationsResponse{} }
func (m *QueryConversationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryConversationsResponse) ProtoMessage()    {}
func (*QueryConversationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{5}
}
func (m *QueryConversationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryConversationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryConversationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryConversationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryConversationsResponse.Merge(m, src)
}
func (m *QueryConversationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryConversationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryConversationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryConversationsResponse proto.InternalMessageInfo

func (m *QueryConversationsResponse) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type QueryPubkeysRequest struct {
}

func (m *QueryPubkeysRequest) Reset()         { *m = QueryPubkeysRequest{} }
func (m *QueryPubkeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubkeysRequest) ProtoMessage()    {}
func (*QueryPubkeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{6}
}
func (m *QueryPubkeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubkeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubkeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubkeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubkeysRequest.Merge(m, src)
}
func (m *QueryPubkeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubkeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubkeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubkeysRequest proto.InternalMessageInfo

type QueryPubkeysResponse struct {
	Pubkeys []*PubKey `protobuf:"bytes,1,rep,name=pubkeys,proto3" json:"pubkeys,omitempty"`
}

func (m *QueryPubkeysResponse) Reset()         { *m = QueryPubkeysResponse{} }
func (m *QueryPubkeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubkeysResponse) ProtoMessage()    {}
func (*QueryPubkeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{7}
}
func (m *QueryPubkeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubkeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubkeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubkeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubkeysResponse.Merge(m, src)
}
func (m *QueryPubkeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubkeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubkeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubkeysResponse proto.InternalMessageInfo

func (m *QueryPubkeysResponse) GetPubkeys() []*PubKey {
	if m != nil {
		return m.Pubkeys
	}
	return nil
}

type QueryPubkeyRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryPubkeyRequest) Reset()         { *m = QueryPubkeyRequest{} }
func (m *QueryPubkeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPubkeyRequest) ProtoMessage()    {}
func (*QueryPubkeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{8}
}
func (m *QueryPubkeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubkeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubkeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubkeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubkeyRequest.Merge(m, src)
}
func (m *QueryPubkeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubkeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubkeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubkeyRequest proto.InternalMessageInfo

func (m *QueryPubkeyRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryPubkeyResponse struct {
	Pubkey *PubKey `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *QueryPubkeyResponse) Reset()         { *m = QueryPubkeyResponse{} }
func (m *QueryPubkeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPubkeyResponse) ProtoMessage()    {}
func (*QueryPubkeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{9}
}
func (m *QueryPubkeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPubkeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPubkeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPubkeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPubkeyResponse.Merge(m, src)
}
func (m *QueryPubkeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPubkeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPubkeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPubkeyResponse proto.InternalMessageInfo

func (m *QueryPubkeyResponse) GetPubkey() *PubKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

type QueryGroupConversationByIdRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGroupConversationByIdRequest) Reset()         { *m = QueryGroupConversationByIdRequest{} }
func (m *QueryGroupConversationByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGroupConversationByIdRequest) ProtoMessage()    {}
func (*QueryGroupConversationByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{10}
}
func (m *QueryGroupConversationByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupConversationByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupConversationByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupConversationByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupConversationByIdRequest.Merge(m, src)
}
func (m *QueryGroupConversationByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupConversationByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupConversationByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupConversationByIdRequest proto.InternalMessageInfo

func (m *QueryGroupConversationByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGroupConversationByIdResponse struct {
	GroupConversation *GroupConversation `protobuf:"bytes,1,opt,name=group_conversation,json=groupConversation,proto3" json:"group_conversation,omitempty"`
}

func (m *QueryGroupConversationByIdResponse) Reset()         { *m = QueryGroupConversationByIdResponse{} }
func (m *QueryGroupConversationByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGroupConversationByIdResponse) ProtoMessage()    {}
func (*QueryGroupConversationByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{11}
}
func (m *QueryGroupConversationByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupConversationByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupConversationByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupConversationByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupConversationByIdResponse.Merge(m, src)
}
func (m *QueryGroupConversationByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupConversationByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupConversationByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupConversationByIdResponse proto.InternalMessageInfo

func (m *QueryGroupConversationByIdResponse) GetGroupConversation() *GroupConversation {
	if m != nil {
		return m.GroupConversation
	}
	return nil
}

type QueryGroupConversationsByAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGroupConversationsByAddressRequest) Reset() {
	*m = QueryGroupConversationsByAddressRequest{}
}
func (m *QueryGroupConversationsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGroupConversationsByAddressRequest) ProtoMessage()    {}
func (*QueryGroupConversationsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{12}
}
func (m *QueryGroupConversationsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupConversationsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupConversationsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupConversationsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupConversationsByAddressRequest.Merge(m, src)
}
func (m *QueryGroupConversationsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupConversationsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupConversationsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupConversationsByAddressRequest proto.InternalMessageInfo

func (m *QueryGroupConversationsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGroupConversationsByAddressResponse struct {
	GroupConversations []*GroupConversation `protobuf:"bytes,1,rep,name=group_conversations,json=groupConversations,proto3" json:"group_conversations,omitempty"`
}

func (m *QueryGroupConversationsByAddressResponse) Reset() {
	*m = QueryGroupConversationsByAddressResponse{}
}
func (m *QueryGroupConversationsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGroupConversationsByAddressResponse) ProtoMessage()    {}
func (*QueryGroupConversationsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_632e7d5904251b7e, []int{13}
}
func (m *QueryGroupConversationsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGroupConversationsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGroupConversationsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGroupConversationsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGroupConversationsByAddressResponse.Merge(m, src)
}
func (m *QueryGroupConversationsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGroupConversationsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGroupConversationsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGroupConversationsByAddressResponse proto.InternalMessageInfo

func (m *QueryGroupConversationsByAddressResponse) GetGroupConversations() []*GroupConversation {
	if m != nil {
		return m.GroupConversations
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "chatty.chat.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "chatty.chat.QueryParamsResponse")
	proto.RegisterType((*QueryConversationRequest)(nil), "chatty.chat.QueryConversationRequest")
	proto.RegisterType((*QueryConversationResponse)(nil), "chatty.chat.QueryConversationResponse")
	proto.RegisterType((*QueryConversationsRequest)(nil), "chatty.chat.QueryConversationsRequest")
	proto.RegisterType((*QueryConversationsResponse)(nil), "chatty.chat.QueryConversationsResponse")
	proto.RegisterType((*QueryPubkeysRequest)(nil), "chatty.chat.QueryPubkeysRequest")
	proto.RegisterType((*QueryPubkeysResponse)(nil), "chatty.chat.QueryPubkeysResponse")
	proto.RegisterType((*QueryPubkeyRequest)(nil), "chatty.chat.QueryPubkeyRequest")
	proto.RegisterType((*QueryPubkeyResponse)(nil), "chatty.chat.QueryPubkeyResponse")
	proto.RegisterType((*QueryGroupConversationByIdRequest)(nil), "chatty.chat.QueryGroupConversationByIdRequest")
	proto.RegisterType((*QueryGroupConversationByIdResponse)(nil), "chatty.chat.QueryGroupConversationByIdResponse")
	proto.RegisterType((*QueryGroupConversationsByAddressRequest)(nil), "chatty.chat.QueryGroupConversationsByAddressRequest")
	proto.RegisterType((*QueryGroupConversationsByAddressResponse)(nil), "chatty.chat.QueryGroupConversationsByAddressResponse")
}

func init() { proto.RegisterFile("chatty/chat/query.proto", fileDescriptor_632e7d5904251b7e) }

var fileDescriptor_632e7d5904251b7e = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x51, 0x4b, 0xdc, 0x4a,
	0x14, 0xde, 0xac, 0xdc, 0xdd, 0xeb, 0x51, 0x2f, 0x38, 0xab, 0xdc, 0x35, 0xde, 0xbb, 0xea, 0x14,
	0xab, 0x55, 0xdc, 0x41, 0xad, 0x85, 0x3e, 0x94, 0xe2, 0x4a, 0x29, 0xa5, 0x48, 0xdb, 0xa5, 0x4f,
	0x42, 0x91, 0xc4, 0x0c, 0x31, 0x58, 0x33, 0x31, 0x93, 0x95, 0x86, 0x65, 0x5f, 0xfa, 0x5e, 0x28,
	0xf4, 0xa5, 0x3f, 0xa1, 0x7d, 0xeb, 0x9f, 0x28, 0xf8, 0x28, 0xf4, 0xa5, 0x4f, 0xa5, 0x68, 0xa1,
	0xcf, 0xfd, 0x07, 0x65, 0x27, 0x93, 0x35, 0x63, 0x62, 0x62, 0x5f, 0x36, 0xc9, 0x39, 0xdf, 0x7c,
	0xdf, 0x37, 0x67, 0xe6, 0x1c, 0x16, 0xfe, 0xdd, 0xdb, 0x37, 0x82, 0x20, 0x24, 0xfd, 0x07, 0x39,
	0xea, 0x50, 0x3f, 0x6c, 0x7a, 0x3e, 0x0b, 0x18, 0x1a, 0x89, 0x12, 0xcd, 0xfe, 0x43, 0x1f, 0x37,
	0x0e, 0x1d, 0x97, 0x11, 0xf1, 0x1b, 0xe5, 0xf5, 0x09, 0x9b, 0xd9, 0x4c, 0xbc, 0x92, 0xfe, 0x9b,
	0x8c, 0xfe, 0x67, 0x33, 0x66, 0xbf, 0xa4, 0xc4, 0xf0, 0x1c, 0x62, 0xb8, 0x2e, 0x0b, 0x8c, 0xc0,
	0x61, 0x2e, 0x97, 0xd9, 0xa5, 0x3d, 0xc6, 0x0f, 0x19, 0x27, 0xa6, 0xc1, 0x69, 0x24, 0x46, 0x8e,
	0x57, 0x4d, 0x1a, 0x18, 0xab, 0xc4, 0x33, 0x6c, 0xc7, 0x15, 0x60, 0x89, 0xad, 0x27, 0x8d, 0x79,
	0x86, 0x6f, 0x1c, 0xc6, 0x2c, 0x53, 0xc9, 0x8c, 0x4d, 0x5d, 0xca, 0x1d, 0x99, 0xc2, 0x13, 0x80,
	0x9e, 0xf5, 0x69, 0x9f, 0x0a, 0x7c, 0x9b, 0x1e, 0x75, 0x28, 0x0f, 0xf0, 0x36, 0xd4, 0x94, 0x28,
	0xf7, 0x98, 0xcb, 0x29, 0xba, 0x03, 0x95, 0x88, 0xb7, 0xae, 0xcd, 0x6a, 0x8b, 0x23, 0x6b, 0xb5,
	0x66, 0x62, 0xcb, 0xcd, 0x08, 0xdc, 0x1a, 0x3e, 0xf9, 0x36, 0x53, 0xfa, 0xf0, 0xf3, 0xd3, 0x92,
	0xd6, 0x96, 0x68, 0xfc, 0x1c, 0xea, 0x82, 0x6e, 0x8b, 0xb9, 0xc7, 0xd4, 0xe7, 0xc2, 0xb4, 0x94,
	0x42, 0xd3, 0x30, 0x2c, 0x48, 0xa8, 0xbf, 0x6b, 0x08, 0xda, 0xe1, 0xf6, 0xdf, 0x32, 0xb0, 0x99,
	0x4c, 0x9a, 0xf5, 0xb2, 0x92, 0x6c, 0xe1, 0x1d, 0x98, 0xca, 0x60, 0x95, 0x56, 0xef, 0xc1, 0xe8,
	0x5e, 0x22, 0x2e, 0x0d, 0x4f, 0x29, 0x86, 0x95, 0x85, 0x0a, 0x1c, 0x6f, 0x64, 0x70, 0xc7, 0xd5,
	0x41, 0x75, 0xa8, 0x4a, 0x13, 0xd2, 0x70, 0xfc, 0x89, 0x5f, 0x80, 0x9e, 0xb5, 0x4c, 0x7a, 0xba,
	0x0f, 0x63, 0x49, 0x91, 0x7e, 0x15, 0x87, 0xf2, 0x4d, 0xa9, 0x78, 0x3c, 0x19, 0x1f, 0x4b, 0xc7,
	0x3c, 0xa0, 0xe1, 0xe0, 0xb4, 0x1e, 0xc0, 0x84, 0x1a, 0x96, 0x7a, 0x2b, 0x50, 0xf5, 0xa2, 0x90,
	0x54, 0xba, 0x74, 0x5e, 0x1d, 0xf3, 0x31, 0x0d, 0xdb, 0x31, 0x06, 0x37, 0xe3, 0xab, 0x20, 0xbe,
	0x13, 0x9b, 0x35, 0x2c, 0xcb, 0xa7, 0x9c, 0xc7, 0x9b, 0x95, 0x9f, 0xb8, 0xa5, 0xb8, 0x19, 0xa8,
	0x2e, 0x43, 0x25, 0x62, 0xcc, 0xbe, 0x24, 0x91, 0xa8, 0x84, 0xe0, 0x75, 0x98, 0x13, 0x1c, 0x0f,
	0x7d, 0xd6, 0xf1, 0x92, 0x5b, 0x6f, 0x85, 0x8f, 0xac, 0xd8, 0xc2, 0x3f, 0x50, 0x76, 0x2c, 0xc1,
	0x36, 0xd4, 0x2e, 0x3b, 0x16, 0xe6, 0x80, 0xf3, 0x16, 0x49, 0x1f, 0xdb, 0x80, 0xec, 0x3e, 0x60,
	0x37, 0xe3, 0x1e, 0x34, 0x14, 0x4f, 0x29, 0x9e, 0xf6, 0xb8, 0x7d, 0x39, 0x84, 0xb7, 0x60, 0x21,
	0x5b, 0x94, 0xb7, 0xc2, 0xcd, 0xa8, 0x22, 0xc5, 0x25, 0xeb, 0xc2, 0x62, 0x31, 0x89, 0xf4, 0xff,
	0x04, 0x6a, 0x69, 0xff, 0xf1, 0x49, 0x16, 0x6d, 0x00, 0xa5, 0x36, 0xc0, 0xd7, 0x7e, 0x55, 0xe1,
	0x2f, 0xa1, 0x8e, 0xf6, 0xa1, 0x12, 0x35, 0x2b, 0x9a, 0x51, 0x78, 0xd2, 0x93, 0x40, 0x9f, 0xbd,
	0x1a, 0x10, 0xf9, 0xc4, 0xd3, 0xaf, 0xbf, 0xfc, 0x78, 0x57, 0x9e, 0x44, 0x35, 0x92, 0x9e, 0x3f,
	0xe8, 0xbd, 0x06, 0xa3, 0x49, 0x17, 0x68, 0x3e, 0xcd, 0x97, 0x31, 0x15, 0xf4, 0x9b, 0x45, 0x30,
	0x29, 0x7e, 0x57, 0x88, 0xaf, 0xa3, 0x55, 0x45, 0x3c, 0x59, 0x31, 0xd2, 0x1d, 0x8c, 0x97, 0xde,
	0xc5, 0xbb, 0xd9, 0x43, 0x6f, 0x34, 0x18, 0x53, 0x0a, 0x84, 0x0a, 0x44, 0x07, 0x35, 0x59, 0x28,
	0xc4, 0x49, 0x77, 0xcb, 0xc2, 0xdd, 0x3c, 0xba, 0x51, 0xec, 0xae, 0x87, 0x0e, 0xa0, 0x2a, 0x1b,
	0x18, 0x65, 0x15, 0x5d, 0x69, 0x79, 0x7d, 0x2e, 0x07, 0x91, 0x7f, 0x2e, 0x02, 0x85, 0x7c, 0xa8,
	0x44, 0xf8, 0xcc, 0x1b, 0x90, 0x1c, 0x00, 0xfa, 0xec, 0xd5, 0x00, 0xa9, 0x34, 0x2f, 0x94, 0x66,
	0xd0, 0xff, 0x19, 0x4a, 0xa4, 0x2b, 0xef, 0x7e, 0x0f, 0x7d, 0xd4, 0x60, 0x32, 0xb3, 0x65, 0x51,
	0x33, 0x2d, 0x91, 0x37, 0x10, 0x74, 0x72, 0x6d, 0xbc, 0x74, 0x48, 0x84, 0xc3, 0x5b, 0x68, 0x41,
	0x71, 0x98, 0x6e, 0x2f, 0xe2, 0x58, 0xa4, 0xeb, 0x58, 0x3d, 0xf4, 0x59, 0x83, 0xe9, 0x9c, 0x26,
	0x45, 0xb7, 0xaf, 0xe1, 0x20, 0x35, 0x18, 0xf4, 0x8d, 0x3f, 0x5c, 0x95, 0x7b, 0xc9, 0x33, 0xdc,
	0xcb, 0x52, 0x5f, 0xd4, 0xbc, 0xb5, 0x72, 0x72, 0xd6, 0xd0, 0x4e, 0xcf, 0x1a, 0xda, 0xf7, 0xb3,
	0x86, 0xf6, 0xf6, 0xbc, 0x51, 0x3a, 0x3d, 0x6f, 0x94, 0xbe, 0x9e, 0x37, 0x4a, 0x3b, 0x35, 0xc9,
	0xf5, 0x2a, 0x62, 0x0b, 0x42, 0x8f, 0x72, 0xb3, 0x22, 0xfe, 0x14, 0xac, 0xff, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0xac, 0x7d, 0x2d, 0x2c, 0xe4, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Conversation items.
	Conversation(ctx context.Context, in *QueryConversationRequest, opts ...grpc.CallOption) (*QueryConversationResponse, error)
	// Queries a list of Conversations items.
	Conversations(ctx context.Context, in *QueryConversationsRequest, opts ...grpc.CallOption) (*QueryConversationsResponse, error)
	// Queries a list of Pubkeys items.
	Pubkeys(ctx context.Context, in *QueryPubkeysRequest, opts ...grpc.CallOption) (*QueryPubkeysResponse, error)
	// Queries a list of Pubkey items.
	Pubkey(ctx context.Context, in *QueryPubkeyRequest, opts ...grpc.CallOption) (*QueryPubkeyResponse, error)
	// Queries a list of GroupConversationById items.
	GroupConversationById(ctx context.Context, in *QueryGroupConversationByIdRequest, opts ...grpc.CallOption) (*QueryGroupConversationByIdResponse, error)
	// Queries a list of GroupConversationsByAddress items.
	GroupConversationsByAddress(ctx context.Context, in *QueryGroupConversationsByAddressRequest, opts ...grpc.CallOption) (*QueryGroupConversationsByAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Conversation(ctx context.Context, in *QueryConversationRequest, opts ...grpc.CallOption) (*QueryConversationResponse, error) {
	out := new(QueryConversationResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Conversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Conversations(ctx context.Context, in *QueryConversationsRequest, opts ...grpc.CallOption) (*QueryConversationsResponse, error) {
	out := new(QueryConversationsResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Conversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pubkeys(ctx context.Context, in *QueryPubkeysRequest, opts ...grpc.CallOption) (*QueryPubkeysResponse, error) {
	out := new(QueryPubkeysResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Pubkeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pubkey(ctx context.Context, in *QueryPubkeyRequest, opts ...grpc.CallOption) (*QueryPubkeyResponse, error) {
	out := new(QueryPubkeyResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/Pubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupConversationById(ctx context.Context, in *QueryGroupConversationByIdRequest, opts ...grpc.CallOption) (*QueryGroupConversationByIdResponse, error) {
	out := new(QueryGroupConversationByIdResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/GroupConversationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GroupConversationsByAddress(ctx context.Context, in *QueryGroupConversationsByAddressRequest, opts ...grpc.CallOption) (*QueryGroupConversationsByAddressResponse, error) {
	out := new(QueryGroupConversationsByAddressResponse)
	err := c.cc.Invoke(ctx, "/chatty.chat.Query/GroupConversationsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Conversation items.
	Conversation(context.Context, *QueryConversationRequest) (*QueryConversationResponse, error)
	// Queries a list of Conversations items.
	Conversations(context.Context, *QueryConversationsRequest) (*QueryConversationsResponse, error)
	// Queries a list of Pubkeys items.
	Pubkeys(context.Context, *QueryPubkeysRequest) (*QueryPubkeysResponse, error)
	// Queries a list of Pubkey items.
	Pubkey(context.Context, *QueryPubkeyRequest) (*QueryPubkeyResponse, error)
	// Queries a list of GroupConversationById items.
	GroupConversationById(context.Context, *QueryGroupConversationByIdRequest) (*QueryGroupConversationByIdResponse, error)
	// Queries a list of GroupConversationsByAddress items.
	GroupConversationsByAddress(context.Context, *QueryGroupConversationsByAddressRequest) (*QueryGroupConversationsByAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Conversation(ctx context.Context, req *QueryConversationRequest) (*QueryConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conversation not implemented")
}
func (*UnimplementedQueryServer) Conversations(ctx context.Context, req *QueryConversationsRequest) (*QueryConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Conversations not implemented")
}
func (*UnimplementedQueryServer) Pubkeys(ctx context.Context, req *QueryPubkeysRequest) (*QueryPubkeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pubkeys not implemented")
}
func (*UnimplementedQueryServer) Pubkey(ctx context.Context, req *QueryPubkeyRequest) (*QueryPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pubkey not implemented")
}
func (*UnimplementedQueryServer) GroupConversationById(ctx context.Context, req *QueryGroupConversationByIdRequest) (*QueryGroupConversationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupConversationById not implemented")
}
func (*UnimplementedQueryServer) GroupConversationsByAddress(ctx context.Context, req *QueryGroupConversationsByAddressRequest) (*QueryGroupConversationsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupConversationsByAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Conversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Conversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Conversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Conversation(ctx, req.(*QueryConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Conversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Conversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Conversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Conversations(ctx, req.(*QueryConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pubkeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubkeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pubkeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Pubkeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pubkeys(ctx, req.(*QueryPubkeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPubkeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/Pubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pubkey(ctx, req.(*QueryPubkeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupConversationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupConversationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupConversationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/GroupConversationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupConversationById(ctx, req.(*QueryGroupConversationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GroupConversationsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGroupConversationsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GroupConversationsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chatty.chat.Query/GroupConversationsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GroupConversationsByAddress(ctx, req.(*QueryGroupConversationsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chatty.chat.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Conversation",
			Handler:    _Query_Conversation_Handler,
		},
		{
			MethodName: "Conversations",
			Handler:    _Query_Conversations_Handler,
		},
		{
			MethodName: "Pubkeys",
			Handler:    _Query_Pubkeys_Handler,
		},
		{
			MethodName: "Pubkey",
			Handler:    _Query_Pubkey_Handler,
		},
		{
			MethodName: "GroupConversationById",
			Handler:    _Query_GroupConversationById_Handler,
		},
		{
			MethodName: "GroupConversationsByAddress",
			Handler:    _Query_GroupConversationsByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chatty/chat/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryConversationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChatterB) > 0 {
		i -= len(m.ChatterB)
		copy(dAtA[i:], m.ChatterB)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChatterB)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChatterA) > 0 {
		i -= len(m.ChatterA)
		copy(dAtA[i:], m.ChatterA)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChatterA)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConversationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConversationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chatter) > 0 {
		i -= len(m.Chatter)
		copy(dAtA[i:], m.Chatter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chatter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryConversationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryConversationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryConversationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for iNdEx := len(m.Conversations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conversations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubkeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubkeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubkeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPubkeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubkeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubkeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkeys) > 0 {
		for iNdEx := len(m.Pubkeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pubkeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubkeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubkeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubkeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPubkeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPubkeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPubkeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pubkey != nil {
		{
			size, err := m.Pubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGroupConversationByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupConversationByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupConversationByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGroupConversationByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupConversationByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupConversationByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GroupConversation != nil {
		{
			size, err := m.GroupConversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGroupConversationsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupConversationsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupConversationsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGroupConversationsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGroupConversationsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGroupConversationsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupConversations) > 0 {
		for iNdEx := len(m.GroupConversations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupConversations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryConversationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChatterA)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ChatterB)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConversationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConversationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chatter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryConversationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for _, e := range m.Conversations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPubkeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPubkeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pubkeys) > 0 {
		for _, e := range m.Pubkeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPubkeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPubkeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGroupConversationByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGroupConversationByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupConversation != nil {
		l = m.GroupConversation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGroupConversationsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGroupConversationsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GroupConversations) > 0 {
		for _, e := range m.GroupConversations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatterA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatterA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatterB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatterB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chatter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chatter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryConversationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryConversationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryConversationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conversations = append(m.Conversations, &Conversation{})
			if err := m.Conversations[len(m.Conversations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubkeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubkeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubkeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubkeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubkeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubkeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkeys = append(m.Pubkeys, &PubKey{})
			if err := m.Pubkeys[len(m.Pubkeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubkeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubkeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubkeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPubkeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPubkeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPubkeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &PubKey{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupConversationByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupConversationByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupConversationByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupConversationByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupConversationByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupConversationByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupConversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupConversation == nil {
				m.GroupConversation = &GroupConversation{}
			}
			if err := m.GroupConversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupConversationsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupConversationsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupConversationsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGroupConversationsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGroupConversationsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGroupConversationsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupConversations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupConversations = append(m.GroupConversations, &GroupConversation{})
			if err := m.GroupConversations[len(m.GroupConversations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
